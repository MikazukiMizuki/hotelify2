// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime?      @updatedAt @map(name: "updated_at")
  Transaction   Transaction[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Room {
  id          Int           @id @default(autoincrement())
  roomName    String
  desc        String?
  status      Boolean       @default(false)
  price       Int
  hotel       Hotel         @relation(fields: [hotelId], references: [id])
  hotelId     Int
  Transaction Transaction[]

  @@map(name: "rooms")
}

model Hotel {
  id    Int     @id @default(autoincrement())
  name  String
  desc  String?
  email String
  Rooms Room[]

  @@map(name: "hotels")
}

model Transaction {
  transactionId Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  room          Room     @relation(fields: [roomId], references: [id])
  roomId        Int
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "transactions")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  User User @relation(fields: [userId], references: [id])
  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
